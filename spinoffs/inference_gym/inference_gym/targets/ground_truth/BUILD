# Copyright 2020 The TensorFlow Probability Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
# Description:
#   Check in ground truth values.

# [internal] load pytype.bzl (pytype_strict_library)

package(
    # default_applicable_licenses
    default_visibility = [
        "//tensorflow_probability:__subpackages__",
        "//inference_gym:__subpackages__",
    ],
)

licenses(["notice"])

# pytype_strict
py_library(
    name = "brownian_motion_missing_middle_observations",
    srcs = ["brownian_motion_missing_middle_observations.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "convection_lorenz_bridge",
    srcs = ["convection_lorenz_bridge.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "convection_lorenz_bridge_unknown_scales",
    srcs = ["convection_lorenz_bridge_unknown_scales.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "eight_schools",
    srcs = ["eight_schools.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "german_credit_numeric_logistic_regression",
    srcs = ["german_credit_numeric_logistic_regression.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "german_credit_numeric_probit_regression",
    srcs = ["german_credit_numeric_probit_regression.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "german_credit_numeric_sparse_logistic_regression",
    srcs = ["german_credit_numeric_sparse_logistic_regression.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "radon_contextual_effects_indiana",
    srcs = ["radon_contextual_effects_indiana.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "radon_contextual_effects_indiana_halfnormal",
    srcs = ["radon_contextual_effects_indiana_halfnormal.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "radon_contextual_effects_minnesota",
    srcs = ["radon_contextual_effects_minnesota.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "radon_contextual_effects_minnesota_halfnormal",
    srcs = ["radon_contextual_effects_minnesota_halfnormal.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "synthetic_item_response_theory",
    srcs = ["synthetic_item_response_theory.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "synthetic_log_gaussian_cox_process",
    srcs = ["synthetic_log_gaussian_cox_process.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "stochastic_volatility_log_sp500",
    srcs = ["stochastic_volatility_log_sp500.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "stochastic_volatility_log_sp500_small",
    srcs = ["stochastic_volatility_log_sp500_small.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "stochastic_volatility_sp500",
    srcs = ["stochastic_volatility_sp500.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "stochastic_volatility_sp500_small",
    srcs = ["stochastic_volatility_sp500_small.py"],
    deps = [
        # numpy dep,
    ],
)

# pytype_strict
py_library(
    name = "brownian_motion_unknown_scales_missing_middle_observations",
    srcs = ["brownian_motion_unknown_scales_missing_middle_observations.py"],
    deps = [
        # numpy dep,
    ],
)
