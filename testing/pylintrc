# Copyright 2018 The TensorFlow Probability Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
# This is based on https://github.com/tensorflow/tensor2tensor/blob/master/pylintrc

[MASTER]

# Pickle collected data for later comparisons.
persistent=no

# Ignore Py3 files
ignore=get_references_web.py,get_references_web_single_group.py


[REPORTS]

# Set the output format.
# output-format=sorted-text

# Tells whether to display a full report or only the messages.
reports=no

# Error message template (continued on second line)
msg-template={msg_id}:{line:3} {obj}: {msg} [{symbol}]


[MESSAGES CONTROL]
# List of checkers and warnings to enable.
enable=indexing-exception,old-raise-syntax

# List of checkers and warnings to disable.
disable=design,
        similarities,
        no-self-use,
        attribute-defined-outside-init,
        locally-disabled,
        star-args,
        pointless-except,
        bad-option-value,
        global-statement,
        fixme,
        suppressed-message,
        useless-suppression,
        locally-enabled,
        file-ignored,
        multiple-imports,
        c-extension-no-member,
        trailing-newlines,
        unsubscriptable-object,
        misplaced-comparison-constant,
        no-member,
        abstract-method,
        no-else-return,
        missing-docstring,
        wrong-import-order,
        protected-access,
        inconsistent-return-statements,
        invalid-unary-operand-type,
        import-error,
        no-name-in-module,
        arguments-differ,
        not-context-manager,
        unused-argument,
        redefined-argument-from-local,
        ungrouped-imports,
        deprecated-method,
        useless-object-inheritance,
        trailing-comma-tuple,
        consider-using-ternary,
        signature-differs,
        unnecessary-pass,
        consider-merging-isinstance,
        consider-using-dict-comprehension,
        bad-mcs-classmethod-argument,
        too-many-function-args,
        wrong-import-position,
        consider-using-set-comprehension,
        no-value-for-parameter,
        consider-using-enumerate,
        simplifiable-if-expression,
        len-as-condition,
        assignment-from-no-return,
        not-an-iterable,
        super-init-not-called,
        consider-using-in,
        raise-missing-from,
        super-with-arguments,
        consider-using-f-string,
        arguments-renamed,
        unnecessary-lambda-assignment,
        unbalanced-tuple-unpacking,
        import-outside-toplevel,
        cyclic-import,
        no-else-raise,
        use-a-generator,
        consider-using-get,
        use-dict-literal

[BASIC]

# Regular expression which should only match the name
# of functions or classes which do not require a docstring.
no-docstring-rgx=(__.*__|main)

# Min length in lines of a function that requires a docstring.
docstring-min-length=10

# Regular expression which should only match correct module names. The
# leading underscore is sanctioned for private modules by Google's style
# guide.
#
# There are exceptions to the basic rule (_?[a-z][a-z0-9_]*) to cover
# requirements of Python's module system.
module-rgx=^(_?[a-z][a-z0-9_]*)|__init__$

# Regular expression which should only match correct module level names
const-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$

# Regular expression which should only match correct class attribute
class-attribute-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$

# Regular expression which should only match correct class names
class-rgx=^_?[A-Z][a-zA-Z0-9]*$

# Regular expression which should only match correct function names.
# 'camel_case' and 'snake_case' group names are used for consistency of naming
# styles across functions and methods.
function-rgx=^(?:(?P<exempt>setUp|tearDown|setUpModule|tearDownModule)|(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$


# Regular expression which should only match correct method names.
# 'camel_case' and 'snake_case' group names are used for consistency of naming
# styles across functions and methods. 'exempt' indicates a name which is
# consistent with all naming styles.
method-rgx=(?x)
  ^(?:(?P<exempt>_[a-z0-9_]+__|runTest|setUp|tearDown|setUpTestCase
         |tearDownTestCase|setupSelf|tearDownClass|setUpClass
         |_?(test|assert|benchmark)_*[A-Z0-9][a-zA-Z0-9_]*|next)
     |(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9_]*)
     |(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$


# Regular expression which should only match correct instance attribute names
attr-rgx=^_{0,2}[a-z][a-z0-9_]*$

# Regular expression which should only match correct argument names
argument-rgx=^[a-z][a-z0-9_]*$

# Regular expression which should only match correct variable names
variable-rgx=^[a-z][a-z0-9_]*$

# Regular expression which should only match correct list comprehension /
# generator expression variable names
inlinevar-rgx=^[a-z][a-z0-9_]*$

# Good variable names which should always be accepted, separated by a comma
good-names=main,_

# Bad variable names which should always be refused, separated by a comma
bad-names=

# List of decorators that define properties, such as abc.abstractproperty.
property-classes=abc.abstractproperty


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of decorators that create context managers from functions, such as
# contextlib.contextmanager.
contextmanager-decorators=contextlib.contextmanager,contextlib2.contextmanager


[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
init-import=no

# A regular expression matching names used for dummy variables (i.e. not used).
dummy-variables-rgx=^\*{0,2}(_$|unused_|dummy_)

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=


[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# "class_" is also a valid for the first argument to a class method.
valid-classmethod-first-arg=cls,class_


[EXCEPTIONS]

overgeneral-exceptions=StandardError,Exception,BaseException


[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec,sets


[FORMAT]

# Maximum number of characters on a single line.
max-line-length=80

# Regexp for a line that is allowed to be longer than the limit.
# This "ignore" regex is today composed of several independent parts:
# (1) Long import lines
# (2) URLs in comments or pydocs. Detecting URLs by regex is a hard problem and
#     no amount of tweaking will make a perfect regex AFAICT. This one is a good
#     compromise.
# (3) Constant string literals at the start of files don't need to be broken
#     across lines. Allowing long paths and urls to be on a single
#     line. Also requires that the string not be a triplequoted string.
ignore-long-lines=(?x)
  (^\s*(import|from)\s
   |^\s*(\#\ )?<?(https?|ftp):\/\/[^\s\/$.?#].[^\s]*>?$
   |^[a-zA-Z_][a-zA-Z0-9_]*\s*=\s*("[^"]\S+"|'[^']\S+')
   )

# Maximum number of lines in a module
max-module-lines=99999

# String used as indentation unit. We differ from PEP8's normal 4 spaces.
indent-string='  '

# Do not warn about multiple statements on a single line for constructs like
#   if test: stmt
single-line-if-stmt=y

[LOGGING]

# Add logging modules.
logging-modules=logging,absl.logging


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=


# Number of spaces of indent required when the last token on the preceding line
# is an open (, [, or {.
indent-after-paren=4
